// <auto-generated />
using System;
using APIExercise.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIExercise.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIExercise.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c12aa5d0-6f53-4bf8-8148-4ba498fd7127"),
                            AccountNumber = "478758",
                            AccountType = 1,
                            Balance = 2000m,
                            ClientId = new Guid("8df0f660-ec84-4295-83ea-4ccede958993"),
                            InitialBalance = 0m,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("fe27f0f2-22ca-4592-9c65-922f62b1ae19"),
                            AccountNumber = "225487",
                            AccountType = 2,
                            Balance = 100m,
                            ClientId = new Guid("1cfec38a-5cc2-4aa9-9775-9425494d359c"),
                            InitialBalance = 0m,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("c983e8c3-6487-4b47-9ff6-5ee3aad89de0"),
                            AccountNumber = "495878",
                            AccountType = 1,
                            Balance = 0m,
                            ClientId = new Guid("43215da9-8700-457b-83cd-e2b9ffc63468"),
                            InitialBalance = 0m,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("a0bbf2c2-cae5-4108-8fe0-a2364e2579ff"),
                            AccountNumber = "496825",
                            AccountType = 2,
                            Balance = 540m,
                            ClientId = new Guid("1cfec38a-5cc2-4aa9-9775-9425494d359c"),
                            InitialBalance = 0m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8df0f660-ec84-4295-83ea-4ccede958993"),
                            City = "Lima",
                            Country = "Perú",
                            PostalCode = "15001",
                            State = "Lima",
                            Street = "Jirón de la Unión"
                        },
                        new
                        {
                            Id = new Guid("1cfec38a-5cc2-4aa9-9775-9425494d359c"),
                            City = "Santiago de Surco",
                            Country = "Perú",
                            PostalCode = "15023",
                            State = "Lima",
                            Street = "Avenida Caminos del Inca"
                        },
                        new
                        {
                            Id = new Guid("43215da9-8700-457b-83cd-e2b9ffc63468"),
                            City = "La Molina",
                            Country = "Perú",
                            PostalCode = "15026",
                            State = "Lima",
                            Street = "Avenida La Molina"
                        });
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdDocument")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CounterpartyAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CounterpartyAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Client", b =>
                {
                    b.HasBaseType("APIExercise.Core.Entities.Person");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8df0f660-ec84-4295-83ea-4ccede958993"),
                            FirstName = "Jose",
                            IdDocument = "12345678",
                            LastName = "Lema",
                            PhoneNumber = "098254785",
                            Password = "1234",
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("1cfec38a-5cc2-4aa9-9775-9425494d359c"),
                            FirstName = "Marianela",
                            IdDocument = "91011121",
                            LastName = "Montalvo",
                            PhoneNumber = "097548965",
                            Password = "5678",
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("43215da9-8700-457b-83cd-e2b9ffc63468"),
                            FirstName = "Juan",
                            IdDocument = "31415161",
                            LastName = "Osorio",
                            PhoneNumber = "098874587",
                            Password = "1245",
                            Status = 2
                        });
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Account", b =>
                {
                    b.HasOne("APIExercise.Core.Entities.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Address", b =>
                {
                    b.HasOne("APIExercise.Core.Entities.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("APIExercise.Core.Entities.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Transaction", b =>
                {
                    b.HasOne("APIExercise.Core.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIExercise.Core.Entities.Account", "CounterpartyAccount")
                        .WithMany("CounterpartyTransactions")
                        .HasForeignKey("CounterpartyAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CounterpartyAccount");
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Account", b =>
                {
                    b.Navigation("CounterpartyTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Person", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("APIExercise.Core.Entities.Client", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
